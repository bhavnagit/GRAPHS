class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
         int[] indegree = new int[numCourses];
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for(int i =0; i<numCourses; i++){
            graph.add(new ArrayList<>());
            
        }
        for(int i =0;i< prerequisites.length; i++){
            int ai = prerequisites[i][0];
            int bi = prerequisites[i][1];
            graph.get(bi).add(ai);
            indegree[ai]++;
        }
        LinkedList<Integer> queue = new LinkedList<>();
        for(int i =0; i<indegree.length; i++){
            if(indegree[i] == 0){
                queue.addLast(i);
            }
        }
        int[] ans = new int[numCourses];
        int count =0;
        while(queue.size()>0){
            int rem = queue.removeFirst();
            ans[count] = rem;
            count++;
            ArrayList<Integer> nbrs = graph.get(rem);
            for(int nbr : nbrs){
                indegree[nbr]--;
                if(indegree[nbr] == 0){
                    queue.addLast(nbr);
                }
            }
        }
        if(count == numCourses){
            return true;
    }else{
            return false;
        }
        
        
    }
}
